<?php

namespace App\Http\Controllers\Api;

use App\Http\Controllers\Controller;
use App\Models\Product;
use App\Models\Region;
use App\Models\RentalPeriod;
use App\Models\AttributeValue;
use Illuminate\Http\Request;
use Illuminate\Http\JsonResponse;
use Illuminate\Validation\ValidationException;

/**
 * @OA\Info(
 *     title="Product Rental API",
 *     version="1.0.0",
 *     description="API for managing product rentals with regional pricing",
 *     @OA\Contact(
 *         email="contact@example.com",
 *         name="API Support"
 *     )
 * )
 */

class ProductController extends Controller
{
    /**
     * Display a listing of products.
     * 
     * @param Request $request
     * @return JsonResponse
     * 
     * @OA\Get(
     *     path="/api/v1/products",
     *     tags={"Products"},
     *     summary="Get list of products",
     *     description="Returns paginated list of products with optional filtering",
     *     @OA\Parameter(
     *         name="region_id",
     *         in="query",
     *         description="Filter by region ID",
     *         required=false,
     *         @OA\Schema(type="integer")
     *     ),
     *     @OA\Parameter(
     *         name="rental_period_id",
     *         in="query",
     *         description="Filter by rental period ID",
     *         required=false,
     *         @OA\Schema(type="integer")
     *     ),
     *     @OA\Response(
     *         response=200,
     *         description="Successful operation",
     *         @OA\JsonContent(
     *             type="object",
     *             @OA\Property(property="success", type="boolean", example=true),
     *             @OA\Property(property="data", type="array", @OA\Items(
     *                 type="object",
     *                 @OA\Property(property="id", type="integer"),
     *                 @OA\Property(property="name", type="string"),
     *                 @OA\Property(property="description", type="string"),
     *                 @OA\Property(property="sku", type="string"),
     *                 @OA\Property(property="is_active", type="boolean"),
     *                 @OA\Property(property="created_at", type="string", format="date-time"),
     *                 @OA\Property(property="updated_at", type="string", format="date-time")
     *             ))
     *         )
     *     )
     * )
     */
    public function index(Request $request): JsonResponse
    {
        $validatedData = $request->validate([
            'region_id' => 'sometimes|integer|exists:regions,id',
            'rental_period_id' => 'sometimes|integer|exists:rental_periods,id',
        ]);
    
        $region = isset($validatedData['region_id']) ? Region::find($validatedData['region_id']) : null;
        $rentalPeriod = isset($validatedData['rental_period_id']) ? RentalPeriod::find($validatedData['rental_period_id']) : null;
    
        if ($region === null && $request->has('region_id')) {
            return response()->json(['error' => 'Invalid region ID'], 422);
        }
    
        if ($rentalPeriod === null && $request->has('rental_period_id')) {
            return response()->json(['error' => 'Invalid rental period ID'], 422);
        }
    
        $query = Product::where('is_active', true)
            ->with(['attributeValues.attribute']);
    
        $this->applyPricingFilters($query, $validatedData);
    
        $products = $query->paginate(15);
    
        return response()->json($products);
    }
    
    private function applyPricingFilters($query, array $validatedData): void
    {
        if (!empty($validatedData['region_id']) || !empty($validatedData['rental_period_id'])) {
            $query->whereHas('pricing', function ($pricingQuery) use ($validatedData) {
                $pricingQuery->where('is_active', true);
    
                if (!empty($validatedData['region_id'])) {
                    $pricingQuery->where('region_id', $validatedData['region_id']);
                }
    
                if (!empty($validatedData['rental_period_id'])) {
                    $pricingQuery->where('rental_period_id', $validatedData['rental_period_id']);
                }
            });
    
            $query->with(['pricing' => function ($pricingQuery) use ($validatedData) {
                $pricingQuery->where('is_active', true);
    
                if (!empty($validatedData['region_id'])) {
                    $pricingQuery->where('region_id', $validatedData['region_id']);
                }
    
                if (!empty($validatedData['rental_period_id'])) {
                    $pricingQuery->where('rental_period_id', $validatedData['rental_period_id']);
                }
    
                $pricingQuery->with(['region', 'rentalPeriod']);
            }]);
        }
    }
    
    /**
     * Display the specified product with pricing information.
     * 
     * @param Request $request
     * @param Product $product
     * @return JsonResponse
     * 
     * @OA\Get(
     *     path="/api/v1/products/{product}",
     *     tags={"Products"},
     *     summary="Get product details",
     *     description="Returns detailed information about a specific product",
     *     @OA\Parameter(
     *         name="product",
     *         in="path",
     *         description="Product ID",
     *         required=true,
     *         @OA\Schema(type="integer")
     *     ),
     *     @OA\Parameter(
     *         name="region_id",
     *         in="query",
     *         description="Region ID for pricing",
     *         required=false,
     *         @OA\Schema(type="integer")
     *     ),
     *     @OA\Response(
     *         response=200,
     *         description="Successful operation",
     *         @OA\JsonContent(
     *             type="object",
     *             @OA\Property(property="success", type="boolean", example=true),
     *             @OA\Property(property="data", type="object",
     *                 @OA\Property(property="id", type="integer"),
     *                 @OA\Property(property="name", type="string"),
     *                 @OA\Property(property="description", type="string"),
     *                 @OA\Property(property="sku", type="string"),
     *                 @OA\Property(property="is_active", type="boolean")
     *             )
     *         )
     *     ),
     *     @OA\Response(
     *         response=404,
     *         description="Product not found"
     *     )
     * )
     */
    public function show(Request $request, Product $product): JsonResponse
    {
        // Get region from request or default to first active region
        $regionId = $request->query('region_id');
        $region = $regionId ? Region::find($regionId) : Region::where('is_active', true)->first();
    
        if (!$region) {
            return response()->json(['error' => 'Invalid region ID'], 422);
        }
    
        // Load the product with its attributes and pricing for the specified region
        $product->load([
            'attributeValues.attribute',
            'pricing' => function ($query) use ($region) {
                $query->where('is_active', true)
                      ->with(['region', 'rentalPeriod']);
            }
        ]);
        
        // Format the response to match the expected structure
        $formattedProduct = [
            'id' => $product->id,
            'name' => $product->name,
            'description' => $product->description,
            'sku' => $product->sku,
            'is_active' => $product->is_active,
            'created_at' => $product->created_at,
            'updated_at' => $product->updated_at,
            'attribute_values' => $product->attributeValues->map(function ($attributeValue) {
                return [
                    'id' => $attributeValue->id,
                    'attribute' => [
                        'id' => $attributeValue->attribute->id,
                        'name' => $attributeValue->attribute->name,
                        'type' => $attributeValue->attribute->type
                    ],
                    'value' => $attributeValue->value
                ];
            }),
            'pricing' => $product->pricing->map(function ($pricing) {
                return [
                    'id' => $pricing->id,
                    'region' => [
                        'id' => $pricing->region->id,
                        'name' => $pricing->region->name,
                        'code' => $pricing->region->code
                    ],
                    'rental_period' => [
                        'id' => $pricing->rentalPeriod->id,
                        'name' => $pricing->rentalPeriod->name,
                        'days' => $pricing->rentalPeriod->days
                    ],
                    'price' => $pricing->price
                ];
            })
        ];
    
        return response()->json([
            'success' => true,
            'data' => $formattedProduct,
            'region' => [
                'id' => $region->id,
                'name' => $region->name,
                'code' => $region->code,
                'is_active' => $region->is_active
            ]
        ]);
    }
    
    /**
     * Get pricing for a product based on region and rental period
     *
     * @param Request $request
     * @param Product $product
     * @return JsonResponse
     * 
     * @OA\Get(
     *     path="/api/v1/products/{product}/pricing",
     *     tags={"Products"},
     *     summary="Get product pricing",
     *     description="Returns pricing information for a specific product with optional filtering",
     *     @OA\Parameter(
     *         name="product",
     *         in="path",
     *         description="Product ID",
     *         required=true,
     *         @OA\Schema(type="integer")
     *     ),
     *     @OA\Parameter(
     *         name="region_id",
     *         in="query",
     *         description="Filter by region ID",
     *         required=false,
     *         @OA\Schema(type="integer")
     *     ),
     *     @OA\Parameter(
     *         name="rental_period_id",
     *         in="query",
     *         description="Filter by rental period ID",
     *         required=false,
     *         @OA\Schema(type="integer")
     *     ),
     *     @OA\Response(
     *         response=200,
     *         description="Successful operation",
     *         @OA\JsonContent(type="object", 
     *             @OA\Property(property="success", type="boolean", example=true),
     *             @OA\Property(property="data", type="array", @OA\Items(
     *                 type="object",
     *                 @OA\Property(property="id", type="integer"),
     *                 @OA\Property(property="region", type="object"),
     *                 @OA\Property(property="rental_period", type="object"),
     *                 @OA\Property(property="price", type="number")
     *             ))
     *         )
     *     ),
     *     @OA\Response(
     *         response=404,
     *         description="Product not found"
     *     )
     * )
     */
    public function getPricing(Request $request, Product $product): JsonResponse
    {
        $validatedData = $request->validate([
            'region_id' => 'sometimes|exists:regions,id',
            'rental_period_id' => 'sometimes|exists:rental_periods,id',
        ]);
    
        $region = isset($validatedData['region_id']) ? Region::find($validatedData['region_id']) : null;
        $rentalPeriod = isset($validatedData['rental_period_id']) ? RentalPeriod::find($validatedData['rental_period_id']) : null;
    
        if ($region === null && $request->has('region_id')) {
            return response()->json(['error' => 'Invalid region ID'], 422);
        }
    
        if ($rentalPeriod === null && $request->has('rental_period_id')) {
            return response()->json(['error' => 'Invalid rental period ID'], 422);
        }
    
        $query = $product->pricing()->where('is_active', true);
        
        // Apply region filter if provided
        if (isset($validatedData['region_id'])) {
            $query->where('region_id', $validatedData['region_id']);
        }
        
        // Apply rental period filter if provided
        if (isset($validatedData['rental_period_id'])) {
            $query->where('rental_period_id', $validatedData['rental_period_id']);
        }
        
        $pricing = $query->with(['region', 'rentalPeriod'])
            ->get()
            ->map(function ($price) {
                return [
                    'id' => $price->id,
                    'region' => [
                        'id' => $price->region->id,
                        'name' => $price->region->name,
                        'code' => $price->region->code,
                    ],
                    'rental_period' => [
                        'id' => $price->rentalPeriod->id,
                        'name' => $price->rentalPeriod->name,
                        'days' => $price->rentalPeriod->days,
                    ],
                    'price' => $price->price,
                ];
            });
    
        return response()->json([
            'success' => true,
            'data' => $pricing,
        ]);
    }

    /**
     * Get all active regions.
     * 
     * @return JsonResponse
     */
    public function regions(): JsonResponse
    {
        $regions = Region::where('is_active', true)->get();
        return response()->json($regions);
    }

    /**
     * Get all active rental periods.
     * 
     * @return JsonResponse
     */
    public function rentalPeriods(): JsonResponse
    {
        $rentalPeriods = RentalPeriod::where('is_active', true)
            ->orderBy('days')
            ->get();
            
        return response()->json($rentalPeriods);
    }
    
    /**
     * Store a newly created product.
     *
     * @param Request $request
     * @return JsonResponse
     * @throws ValidationException
     * 
     * @OA\Post(
     *     path="/api/v1/products",
     *     tags={"Products"},
     *     summary="Create new product",
     *     description="Creates a new product with attributes",
     *     @OA\RequestBody(
     *         required=true,
     *         @OA\JsonContent(
     *             required={"name", "description", "sku"},
     *             @OA\Property(property="name", type="string", example="New Product"),
     *             @OA\Property(property="description", type="string", example="Detailed product description"),
     *             @OA\Property(property="sku", type="string", example="NP-12345"),
     *             @OA\Property(property="is_active", type="boolean", example=true),
     *             @OA\Property(property="attribute_values", type="array", @OA\Items(type="integer"))
     *         )
     *     ),
     *     @OA\Response(
     *         response=201,
     *         description="Product created successfully",
     *         @OA\JsonContent(
     *             type="object",
     *             @OA\Property(property="success", type="boolean", example=true),
     *             @OA\Property(property="message", type="string", example="Product created successfully"),
     *             @OA\Property(property="data", type="object")
     *         )
     *     ),
     *     @OA\Response(
     *         response=422,
     *         description="Validation error"
     *     )
     * )
     */
    public function store(Request $request): JsonResponse
    {
        $validated = $request->validate([
            'name' => 'required|string|max:255',
            'description' => 'required|string',
            'sku' => 'required|string|max:50|unique:products,sku',
            'is_active' => 'sometimes|boolean',
            'attribute_values' => 'sometimes|array',
            'attribute_values.*' => 'exists:attribute_values,id'
        ]);
        
        // Create the product
        $product = new Product();
        $product->name = $validated['name'];
        $product->description = $validated['description'];
        $product->sku = $validated['sku'];
        $product->is_active = $validated['is_active'] ?? true;
        $product->save();
        
        // Attach attribute values if provided
        if (isset($validated['attribute_values']) && !empty($validated['attribute_values'])) {
            $product->attributeValues()->attach($validated['attribute_values']);
        }
        
        // Process attributes from the request (key-value format)
        $attributes = $request->input('attributes');
        if (!empty($attributes) && is_array($attributes)) {
            foreach ($attributes as $attributeName => $attributeValue) {
                // Find or create the attribute
                $attribute = Attribute::firstOrCreate(['name' => $attributeName], [
                    'type' => 'text',
                    'is_filterable' => true,
                    'is_required' => false
                ]);
                
                // Find or create the attribute value
                $attrValue = AttributeValue::firstOrCreate([
                    'attribute_id' => $attribute->id,
                    'value' => $attributeValue
                ]);
                
                // Attach the attribute value to the product
                $product->attributeValues()->attach($attrValue->id);
            }
        }

        // Load the attribute values relationship and any pricing
        $product->load([
            'attributeValues.attribute',
            'pricing' => function ($query) {
                $query->where('is_active', true)
                      ->with(['region', 'rentalPeriod']);
            }
        ]);
        
        // Format the response to match the expected structure
        $formattedProduct = [
            'id' => $product->id,
            'name' => $product->name,
            'description' => $product->description,
            'sku' => $product->sku,
            'is_active' => $product->is_active,
            'created_at' => $product->created_at,
            'updated_at' => $product->updated_at,
            'attribute_values' => $product->attributeValues->map(function ($attributeValue) {
                return [
                    'id' => $attributeValue->id,
                    'attribute' => [
                        'id' => $attributeValue->attribute->id,
                        'name' => $attributeValue->attribute->name,
                        'type' => $attributeValue->attribute->type
                    ],
                    'value' => $attributeValue->value
                ];
            }),
            'pricing' => $product->pricing->map(function ($pricing) {
                return [
                    'id' => $pricing->id,
                    'region' => [
                        'id' => $pricing->region->id,
                        'name' => $pricing->region->name,
                        'code' => $pricing->region->code
                    ],
                    'rental_period' => [
                        'id' => $pricing->rentalPeriod->id,
                        'name' => $pricing->rentalPeriod->name,
                        'days' => $pricing->rentalPeriod->days
                    ],
                    'price' => $pricing->price
                ];
            })
        ];

        // Get the default region for context
        $region = Region::where('is_active', true)->first();
        $regionData = $region ? [
            'id' => $region->id,
            'name' => $region->name,
            'code' => $region->code,
            'is_active' => $region->is_active
        ] : null;

        return response()->json([
            'success' => true,
            'message' => 'Product created successfully',
            'data' => $formattedProduct,
            'region' => $regionData
        ], 201);
    }

    /**
     * Update the specified product.
     *
     * @param Request $request
     * @param Product $product
     * @return JsonResponse
     * @throws ValidationException
     * 
     * @OA\Put(
     *     path="/api/v1/products/{product}",
     *     tags={"Products"},
     *     summary="Update product",
     *     description="Updates an existing product and its attributes",
     *     @OA\Parameter(
     *         name="product",
     *         in="path",
     *         description="Product ID",
     *         required=true,
     *         @OA\Schema(type="integer")
     *     ),
     *     @OA\RequestBody(
     *         required=true,
     *         @OA\JsonContent(
     *             @OA\Property(property="name", type="string"),
     *             @OA\Property(property="description", type="string"),
     *             @OA\Property(property="sku", type="string"),
     *             @OA\Property(property="is_active", type="boolean"),
     *             @OA\Property(property="attribute_values", type="array", @OA\Items(type="integer"))
     *         )
     *     ),
     *     @OA\Response(
     *         response=200,
     *         description="Product updated successfully",
     *         @OA\JsonContent(
     *             type="object",
     *             @OA\Property(property="success", type="boolean", example=true),
     *             @OA\Property(property="message", type="string", example="Product updated successfully"),
     *             @OA\Property(property="data", type="object")
     *         )
     *     ),
     *     @OA\Response(
     *         response=404,
     *         description="Product not found"
     *     ),
     *     @OA\Response(
     *         response=422,
     *         description="Validation error"
     *     )
     * )
     */
    public function update(Request $request, Product $product): JsonResponse
    {
        $validated = $request->validate([
            'name' => 'sometimes|string|max:255',
            'description' => 'sometimes|string',
            'sku' => 'sometimes|string|max:50|unique:products,sku,' . $product->id,
            'is_active' => 'sometimes|boolean',
            'attribute_values' => 'sometimes|array',
            'attribute_values.*' => 'exists:attribute_values,id',
        ]);

        // Update the product
        $product->fill($validated);
        $product->save();

        // Update attribute values if provided
        if (isset($validated['attribute_values'])) {
            $product->attributeValues()->sync($validated['attribute_values']);
        }

        // Load the attribute values relationship
        $product->load('attributeValues.attribute');

        return response()->json([
            'success' => true,
            'message' => 'Product updated successfully',
            'data' => $product
        ]);
    }

    /**
     * Remove the specified product.
     *
     * @param Product $product
     * @return JsonResponse
     * 
     * @OA\Delete(
     *     path="/api/v1/products/{product}",
     *     tags={"Products"},
     *     summary="Delete product",
     *     description="Deletes a product if it has no associated pricing",
     *     @OA\Parameter(
     *         name="product",
     *         in="path",
     *         description="Product ID",
     *         required=true,
     *         @OA\Schema(type="integer")
     *     ),
     *     @OA\Response(
     *         response=200,
     *         description="Product deleted successfully",
     *         @OA\JsonContent(
     *             type="object",
     *             @OA\Property(property="success", type="boolean", example=true),
     *             @OA\Property(property="message", type="string", example="Product deleted successfully")
     *         )
     *     ),
     *     @OA\Response(
     *         response=404,
     *         description="Product not found"
     *     ),
     *     @OA\Response(
     *         response=422,
     *         description="Cannot delete product with pricing"
     *     )
     * )
     */
    public function destroy(Product $product): JsonResponse
    {
        // Check if product has any pricing or is being used in rental transactions
        $hasPricing = $product->pricing()->exists();
        
        if ($hasPricing) {
            return response()->json([
                'success' => false,
                'message' => 'Cannot delete product with associated pricing. Consider deactivating it instead.',
            ], 422);
        }
        
        // Detach any attribute values
        $product->attributeValues()->detach();
        
        // Delete the product
        $product->delete();

        return response()->json([
            'success' => true,
            'message' => 'Product deleted successfully'
        ]);
    }
}